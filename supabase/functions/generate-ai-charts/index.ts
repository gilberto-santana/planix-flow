
import { corsHeaders } from '../_shared/cors.ts'
import { GoogleGenerativeAI } from 'npm:@google/generative-ai'

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log("üöÄ Iniciando fun√ß√£o generate-ai-charts");

    // Verificar se a chave API existe
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      console.error("‚ùå GEMINI_API_KEY n√£o encontrada nos secrets");
      throw new Error("Chave API do Gemini n√£o configurada. Configure GEMINI_API_KEY nos secrets do Supabase.")
    }

    console.log("‚úÖ Chave API encontrada, comprimento:", geminiApiKey.length);

    const contentType = req.headers.get("content-type") || ""
    if (!contentType.includes("application/json")) {
      throw new Error("Requisi√ß√£o inv√°lida: Content-Type n√£o √© application/json")
    }

    const bodyText = await req.text()
    console.log("üì® Body recebido:", bodyText ? "‚úÖ N√£o vazio" : "‚ùå Vazio");
    
    if (!bodyText) {
      throw new Error("Corpo da requisi√ß√£o vazio.")
    }

    let body
    try {
      body = JSON.parse(bodyText)
    } catch (e) {
      console.error("‚ùå Erro ao fazer parse do JSON:", e);
      throw new Error("JSON malformado recebido na requisi√ß√£o.")
    }

    const { data: sheetData } = body
    if (!sheetData || !Array.isArray(sheetData) || sheetData.length === 0) {
      console.error("‚ùå Dados da planilha inv√°lidos:", { sheetData: sheetData ? "exists" : "null", isArray: Array.isArray(sheetData), length: sheetData?.length });
      throw new Error("Dados da planilha ('data') n√£o encontrados ou vazios.")
    }

    console.log("üìä Dados da planilha v√°lidos:", { totalRows: sheetData.length, sampleRow: sheetData[0] });

    // Inicializar Gemini com modelo atualizado
    const genAI = new GoogleGenerativeAI(geminiApiKey)
    // Usar modelo mais recente e confi√°vel
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

    // Prompt melhorado para gerar JSON v√°lido
    const prompt = `Voc√™ √© um especialista em an√°lise de dados e visualiza√ß√£o. Analise os seguintes dados de planilha e gere at√© 10 gr√°ficos em formato JSON compat√≠vel com Chart.js.

DADOS DA PLANILHA:
${JSON.stringify(sheetData, null, 2)}

INSTRU√á√ïES:
1. Analise os dados e identifique padr√µes interessantes
2. Crie gr√°ficos relevantes (barras, linhas, pizza) baseados nos dados
3. Responda APENAS com um array JSON v√°lido, sem texto adicional
4. Cada gr√°fico deve ter esta estrutura:
{
  "type": "bar|line|pie",
  "data": {
    "labels": ["Label1", "Label2"],
    "datasets": [{
      "label": "Nome do Dataset",
      "data": [valor1, valor2],
      "backgroundColor": ["#3B82F6", "#10B981"],
      "borderColor": ["#1E40AF", "#047857"],
      "borderWidth": 1
    }]
  },
  "options": {
    "responsive": true,
    "plugins": {
      "title": {
        "display": true,
        "text": "T√≠tulo do Gr√°fico"
      }
    }
  }
}

Responda apenas com o array JSON, come√ßando com [ e terminando com ].`

    console.log("ü§ñ Enviando dados para Gemini...");

    const result = await model.generateContent(prompt)
    const response = await result.response
    const responseText = response.text()

    console.log("üìù Resposta bruta do Gemini:", responseText.substring(0, 200) + "...");

    // Tentar fazer parse da resposta
    let chartConfig
    try {
      // Limpar a resposta caso tenha markdown ou texto extra
      const cleanResponse = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
      chartConfig = JSON.parse(cleanResponse)
    } catch (e) {
      console.error("‚ùå Erro ao fazer parse da resposta do Gemini:", e);
      console.error("Resposta original:", responseText);
      
      // Fallback: criar gr√°fico simples baseado nos dados
      chartConfig = [{
        type: "bar",
        data: {
          labels: sheetData.slice(0, 10).map((item, index) => item.column_name || `Item ${index + 1}`),
          datasets: [{
            label: "Dados da Planilha",
            data: sheetData.slice(0, 10).map(item => {
              const value = parseFloat(item.cell_value || item.value || "0")
              return isNaN(value) ? 0 : value
            }),
            backgroundColor: "#3B82F6",
            borderColor: "#1E40AF",
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: "Gr√°fico Autom√°tico dos Dados"
            }
          }
        }
      }]
    }

    // Validar se chartConfig √© um array
    if (!Array.isArray(chartConfig)) {
      console.error("‚ùå Resposta do Gemini n√£o √© um array v√°lido");
      chartConfig = [chartConfig] // Converter para array se necess√°rio
    }

    console.log("‚úÖ Gr√°ficos gerados com sucesso:", chartConfig.length);

    return new Response(JSON.stringify({ chartConfig }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200
    })
  } catch (error) {
    console.error("‚ùå Erro na fun√ß√£o generate-ai-charts:", error);
    
    // Tratamento espec√≠fico para erros de API key
    if (error.message?.includes('API key not valid') || error.message?.includes('Invalid API key')) {
      return new Response(JSON.stringify({ 
        error: "Chave API do Gemini inv√°lida. Verifique se a GEMINI_API_KEY est√° correta nos secrets do Supabase." 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401
      })
    }
    
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    })
  }
})
